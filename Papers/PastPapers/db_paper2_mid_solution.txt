drop table university_ranking_year;
drop table ranking_criteria;
drop table ranking_system;
drop table university_year;
drop table university;
drop table country;


CREATE TABLE COUNTRY(
    ID INTEGER,
    COUNTRY_NAME VARCHAR(100),
    CONSTRAINT P_KEY PRIMARY KEY(ID)
);

CREATE TABLE UNIVERSITY(
    ID INTEGER,
    COUNTRY_ID INTEGER,
    UNIVERSITY_NAME VARCHAR(100),
    CONSTRAINT P2_KEY PRIMARY KEY(ID),
    CONSTRAINT F_KEY FOREIGN KEY (COUNTRY_ID) REFERENCES COUNTRY(ID)
);

CREATE TABLE UNIVERSITY_YEAR(
    UNIVERSITY_ID INTEGER,
    YEAR DATE,
    NUM_STUDENTS INTEGER,
    CONSTRAINT P3_KEY PRIMARY KEY(UNIVERSITY_ID),
    CONSTRAINT F2_KEY FOREIGN KEY (UNIVERSITY_ID) REFERENCES UNIVERSITY(ID)
);

CREATE TABLE RANKING_SYSTEM(
    ID INTEGER PRIMARY KEY,
    SYSTEM_NAME VARCHAR(100)
);

CREATE TABLE RANKING_CRITERIA(
    ID INTEGER PRIMARY KEY,
    RANKING_SYSTEM_ID INTEGER,
    CRITERIA_NAME INTEGER,
    FOREIGN KEY (RANKING_SYSTEM_ID) REFERENCES RANKING_SYSTEM(ID)
);

CREATE TABLE UNIVERSITY_RANKING_YEAR(
    UNIVERSITY_ID INTEGER,
    RANKING_CRITERIA_ID INTEGER,
    YEAR DATE,
    SCORE INTEGER,
    FOREIGN KEY (UNIVERSITY_ID) REFERENCES UNIVERSITY(ID),
    FOREIGN KEY (RANKING_CRITERIA_ID) REFERENCES RANKING_CRITERIA(ID)
);

INSERT INTO COUNTRY(ID,COUNTRY_NAME) VALUES(100, 'PAKISTAN');
INSERT INTO COUNTRY(ID,COUNTRY_NAME) VALUES(101, 'INDIA');
INSERT INTO COUNTRY(ID,COUNTRY_NAME) VALUES(102, 'AFGHANISTAN');
INSERT INTO COUNTRY(ID,COUNTRY_NAME) VALUES(103, 'BANGLADESH');
INSERT INTO COUNTRY(ID,COUNTRY_NAME) VALUES(104, 'CHINA');

SELECT * FROM COUNTRY;

INSERT INTO UNIVERSITY(ID,COUNTRY_ID,UNIVERSITY_NAME) VALUES(2001,100,'FAST');
INSERT INTO UNIVERSITY(ID,COUNTRY_ID,UNIVERSITY_NAME) VALUES(2002,100,'NUST');
INSERT INTO UNIVERSITY(ID,COUNTRY_ID,UNIVERSITY_NAME) VALUES(2003,103,'LUMS');
INSERT INTO UNIVERSITY(ID,COUNTRY_ID,UNIVERSITY_NAME) VALUES(2004,102,'KU');
INSERT INTO UNIVERSITY(ID,COUNTRY_ID,UNIVERSITY_NAME) VALUES(2005,104,'UBIT');

SELECT * FROM UNIVERSITY;

INSERT INTO UNIVERSITY_YEAR(UNIVERSITY_ID,YEAR,NUM_STUDENTS) VALUES(2001,'12-DEC-2019',25);
INSERT INTO UNIVERSITY_YEAR(UNIVERSITY_ID,YEAR,NUM_STUDENTS) VALUES(2002,'12-NOV-2020',45);
INSERT INTO UNIVERSITY_YEAR(UNIVERSITY_ID,YEAR,NUM_STUDENTS) VALUES(2004,'08-APR-2008',125);
INSERT INTO UNIVERSITY_YEAR(UNIVERSITY_ID,YEAR,NUM_STUDENTS) VALUES(2005,'31-DEC-2007',90);
INSERT INTO UNIVERSITY_YEAR(UNIVERSITY_ID,YEAR,NUM_STUDENTS) VALUES(2003,'14-SEP-2015',70);

SELECT * FROM UNIVERSITY_YEAR;

INSERT INTO RANKING_SYSTEM(ID,SYSTEM_NAME) VALUES(3001,'SMART SYSTEM');
INSERT INTO RANKING_SYSTEM(ID,SYSTEM_NAME) VALUES(3002,'NTS');
INSERT INTO RANKING_SYSTEM(ID,SYSTEM_NAME) VALUES(3003,'ENTRY TEST');
INSERT INTO RANKING_SYSTEM(ID,SYSTEM_NAME) VALUES(3004,'ADMISSION TEST');
INSERT INTO RANKING_SYSTEM(ID,SYSTEM_NAME) VALUES(3005,'SMART SYSTEM');

SELECT * FROM RANKING_SYSTEM;

INSERT INTO RANKING_CRITERIA(ID,RANKING_SYSTEM_ID,CRITERIA_NAME) VALUES(4001,3001,001);
INSERT INTO RANKING_CRITERIA(ID,RANKING_SYSTEM_ID,CRITERIA_NAME) VALUES(4002,3005,002);
INSERT INTO RANKING_CRITERIA(ID,RANKING_SYSTEM_ID,CRITERIA_NAME) VALUES(4003,3004,003);
INSERT INTO RANKING_CRITERIA(ID,RANKING_SYSTEM_ID,CRITERIA_NAME) VALUES(4004,3002,004);
INSERT INTO RANKING_CRITERIA(ID,RANKING_SYSTEM_ID,CRITERIA_NAME) VALUES(4005,3002,005);

SELECT * FROM RANKING_CRITERIA;

INSERT INTO UNIVERSITY_RANKING_YEAR(UNIVERSITY_ID,RANKING_CRITERIA_ID,YEAR,SCORE) VALUES(2001,4001,'14-SEP-2015',100);
INSERT INTO UNIVERSITY_RANKING_YEAR(UNIVERSITY_ID,RANKING_CRITERIA_ID,YEAR,SCORE) VALUES(2003,4002,'12-DEC-2019',200);
INSERT INTO UNIVERSITY_RANKING_YEAR(UNIVERSITY_ID,RANKING_CRITERIA_ID,YEAR,SCORE) VALUES(2004,4003,'12-NOV-2020',300);
INSERT INTO UNIVERSITY_RANKING_YEAR(UNIVERSITY_ID,RANKING_CRITERIA_ID,YEAR,SCORE) VALUES(2005,4004,'31-DEC-2007',190);
INSERT INTO UNIVERSITY_RANKING_YEAR(UNIVERSITY_ID,RANKING_CRITERIA_ID,YEAR,SCORE) VALUES(2005,4005,'01-JAN-2018',250);

SELECT * FROM UNIVERSITY_RANKING_YEAR;


--ALTER TABLE COUNTRY DROP CONSTRAINT P_KEY;
--SHOWS THE ERROR AS IT'S THE FOREIGN KEY IN UNIVERSITY TABLE SHOULD ON DELETE CASCADE, SET NULL, OR DEFAULT HERE
--ALTER TABLE UNIVERSITY DROP CONSTRAINT P2_KEY;
--SHOWS THE ERROR AS IT'S THE FOREIGN KEY IN UNIVERSITY TABLE SHOULD ON DELETE CASCADE, SET NULL, OR DEFAULT HERE
ALTER TABLE UNIVERSITY DROP CONSTRAINT F_KEY;


ALTER TABLE COUNTRY DROP CONSTRAINT P_KEY;
--SHOWS THE ERROR AS IT'S THE FOREIGN KEY IN UNIVERSITY TABLE SHOULD ON DELETE CASCADE, SET NULL, OR DEFAULT HERE
ALTER TABLE UNIVERSITY DROP CONSTRAINT P2_KEY;
--SHOWS THE ERROR AS IT'S THE FOREIGN KEY IN UNIVERSITY TABLE SHOULD ON DELETE CASCADE, SET NULL, OR DEFAULT HERE
--DROPPED

--QUESTION#02;
--1
SELECT INITCAP(LAST_NAME) FROM EMPLOYEES;
--2
SELECT LAST_NAME FROM EMPLOYEES WHERE LAST_NAME like '%aa%';
--3
SELECT COUNT(*),JOB_ID FROM EMPLOYEES GROUP BY JOB_ID;
--4
SELECT E.FIRST_NAME||' '||E.HIRE_DATE,LENGTH(E.FIRST_NAME) FROM EMPLOYEES E,JOBS J WHERE E.JOB_ID = J.JOB_ID 
AND J.JOB_TITLE = 'Sales Representative';
--5
SELECT E.FIRST_NAME, S.FIRST_NAME  FROM EMPLOYEES E,EMPLOYEES S WHERE E.EMPLOYEE_ID = S.MANAGER_ID ;
--6
UPDATE EMPLOYEES set SALARY=SALARY+(0.5*SALARY) where SALARY <=7000;
--7
SELECT  E.DEPARTMENT_ID,AVG(SALARY),COUNT(*) FROM EMPLOYEES E,DEPARTMENTS D WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID
AND E.COMMISSION_PCT IS NOT NULL GROUP BY E.DEPARTMENT_ID;
--8
SELECT First_Name,HIRE_DATE FROM EMPLOYEES WHERE HIRE_DATE<'20-MAY-07';
--9
SELECT J.* FROM JOBS J , JOB_HISTORY H WHERE J.job_id = H.JOB_ID AND J.JOB_TITLE = 'Public Accountant';
--10
SELECT FIRST_NAME,SALARY,EMAIL,DEPARTMENT_ID FROM EMPLOYEES WHERE SALARY > (SELECT AVG(SALARY) FROM EMPLOYEES) ORDER BY SALARY desc;
--11
SELECT FIRST_NAME, SALARY,COMMISSION_PCT,SALARY+(commission_pct*salary) AS TOTALSALARY FROM EMPLOYEES WHERE COMMISSION_PCT IS NOT NULL ;
--12
SELECT L.CITY,L.COUNTRY_ID,D.DEPARTMENT_ID FROM LOCATIONS L,DEPARTMENTS D WHERE D.LOCATION_ID = L.LOCATION_ID 
AND D.DEPARTMENT_ID IN (SELECT DEPARTMENT_ID FROM EMPLOYEES GROUP BY DEPARTMENT_ID HAVING COUNT(*)>3);
--13
SELECT E.DEPARTMENT_ID,D.DEPARTMENT_NAME,L.CITY,L.COUNTRY_ID,L.POSTAL_CODE FROM EMPLOYEES E, 
DEPARTMENTS D, LOCATIONS L WHERE E.MANAGER_ID = D.MANAGER_ID AND D.LOCATION_ID = L.LOCATION_ID;
--14
SELECT E.FIRST_NAME, E.LAST_NAME, E.DEPARTMENT_ID, D.DEPARTMENT_NAME FROM EMPLOYEES E , DEPARTMENTS D 
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID OR E.DEPARTMENT_ID IS NULL;
--15
SELECT E.FIRST_NAME, E.LAST_NAME, E.SALARY, E.MANAGER_ID, D.DEPARTMENT_NAME, L.CITY FROM EMPLOYEES 
E, DEPARTMENTS D, LOCATIONS L WHERE E.LAST_NAME LIKE '%y' AND E.DEPARTMENT_ID = D.DEPARTMENT_ID AND D.LOCATION_ID = L.LOCATION_ID;
